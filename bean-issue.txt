package com.restfulapi_reactive.todolist_project.controllers;


import com.restfulapi_reactive.todolist_project.models.reqrespBodies.ReqLogin;
import com.restfulapi_reactive.todolist_project.models.reqrespModel.ReqRespModel;
import com.restfulapi_reactive.todolist_project.services.JWTService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

@RestController
public class AuthController {

    final ReactiveUserDetailsService users;
    final JWTService jwtService;
    final PasswordEncoder encoder;

    @Autowired
    public AuthController(ReactiveUserDetailsService users, JWTService jwtService, PasswordEncoder encoder) {
        this.users = users;
        this.jwtService = jwtService;
        this.encoder = encoder;
    }


    @GetMapping("/auth")
    public Mono<ResponseEntity<ReqRespModel<String>>> auth() {
        return Mono.just(
                ResponseEntity.ok(
                        new ReqRespModel<>("Welcome to Todolist Project", "")
                ));
    }

    @PostMapping("/login")
    public Mono<ResponseEntity<ReqRespModel<String>>> login(@RequestBody ReqLogin user) {
        //return null if empty/not found
       Mono<UserDetails> foundUser = users.findByUsername(user.getEmail()).defaultIfEmpty(null);

       return foundUser.flatMap(u -> {
           if(u != null){
               if(encoder.matches(user.getPassword(), u.getPassword())){
                   return Mono.just(
                        ResponseEntity.ok(
                                new ReqRespModel<>(jwtService.generate(u.getUsername()), "Success")
                        )
                   );
               }
               return Mono.just(
                       ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new ReqRespModel<>("", "Invalid Credential"))
               );
           }
           return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new ReqRespModel<>("", "User not Found, please Register")));
       });
    }
}
